1. What is useRefs Hooks?
    We are using useRefs hook for 3 purposes
        1. To stop re-render while updating our State values.
        2. To store previous state values.
        3. Managing focus, text selection, or media playback.

2. what is Controlled and Uncontrolled Components in React JS?
  
  Controlled Components : This Components will handled by the React State.
  Uncontrolled Components: This Components will handled by the JS Dom itself.

3. What is Reconciliation in React JS?

    If props or State values will update in React Components, React decides to compare new value 
    with the old value in Dom. If both are not equal it will update in Virtual Dom. 

4. What is the purposes of using props in super method ?
    
     Super Method will be used in class components. In Class component we will use this.
     In super(props)  - this.props will accept for the component
        super()       - this.props will not accept for the component. If you give this.props value
                         will be undefined. but if you give props value will be defined.

5. What is Portals in React JS?
    
    - Portals means Jumping from one place to another place.
    
    - We can create one Portal component
    and give instruction wehere we need our data to be rendered. and call that Portal
    component.
    - We will Mainly use Portal for Modal, Tooltip, Animation effects etc.
  
  
    
More Priority Questions:

1. Pure Components? ok
2. Error Boundaries?
3. State Management? ok
4. Life Cycle in React?
5. Redux? and Redux Toolkit?
6. How Redux Works?
7. Higher Order Components(HOC)? ok
8. formik?
9. Diffing Algorithm?
10. Hooks and explain all hooks? basic Hooks ok 
11. Controlled and Uncontrolled component? ok
12. Prop Drilling?
13. What is State mutation and how to prevent it?
14. Difference between useState and useRef in React?



1. Pure Components:
 
It will re-render only when the State and Props value changes. otherwise 
it wont re-render the component. It will check automatically whether the 
state and props value changed or not. If values are same it wont re-render
If values are different it will re-render


  What type of Problem does the Pure component should solve?

        it will stop re-render the component again and again

2. What is State Management?

        Initializing the state by using useState and updating the state by using setstate Method.
        We can transfer the state value by using props. 
        For a bigger application transfer of more data is more complex at that time we 
        need to use Redux or Redux Toolkit.

3. Life Cycle in React Js?

        Stages : 
                1. Mounting
                2. updating 
                3. Unmounting
        Lifecycle:
                1. ComponentDidMount()
                2. ComponentDidUpdate()        
                3. ComponentWillUnmount()
        Advance Lifecycle:
                1. getDerivedFromProps()
                2. shouldComponentUpdate()
                3. getSnapshotBeforeUpdate()

4. Higher Order Component (HOC)?

        - HOC is a function that takes the component and returns the new component.
        - Write the function inside that new componetn and insert logic inside that 
        component and pass that function as argument.


5. Hooks in React JS:

Basic Hooks:

1. useState
2. useEffect
3. useContext

Additional Hooks
1. useRef
2. useMemo
3. useReducer
4. useCallback
5. useImperativeHandle
6. useLayoutEffect
7. useDebugValue


1. UseEffect : 
    
    Why: To run our operation after rendering our Virtual Dom.
    
    What: It will run operation after render, it accept some dependency array. If you give dependency
    array, it will run based on that array.
    
    Where: We should use inside the component but we can't use this hook inside any function.

2. usecontext :

    Why: To access the data at by many component at different nesting levels. simply, Globally we 
         can access the data wherever we need.
    
    What: Globally passing the data without using props.

    Steps:
         1. Define Context : userContext = React.createContext({}) 
         2. <userContext.Provider value={{email:"praba@gmail.com"}}>
                <child components/>
         </userContext.Provider>  
         
         3. <userContext.Consumer>{(value)=>{
             return(
                 <div>
                    {value.email}
                 </div>
             )
         }} 
         </userContext.Consumer>

         4. const value = useContext(userContext)

3. useCallback:

        Why and What type of Problem does the useCallback solve.

            - To Avoid unnecessary rendering. 
            
            - When we click or update any values in the component
            some unnecessary values will re-render again and again like a loop. 
            To Stop that type of re-render useCallback will be introduced.

4. UseMemo:

        - It is same as UseCallback.
        - Returns the Memorized value
        - It run when its dependency value update.
        - It also stop the unnecessary render while the function is running.
        - good practise is to stop using useMemo because it affects the performance.
5. UseRef():
        -We can use useRef for 2 purposes
        -To Access our DOM Directly
        -To accessing the previous value in the component.
        -This hooks returns only one value
        -It return the current values.
        -While accessing the previous values using use state we will 
        face looping issue.
        